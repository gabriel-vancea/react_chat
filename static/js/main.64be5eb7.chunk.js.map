{"version":3,"sources":["firebase/firebase.utils.js","components/FirebaseComponent.js","components/RoomData.js","components/RoomChatComponent.js","components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","createText","text","roomID","collection","add","roomId","datetime","Date","user","localStorage","getItem","RoomData","style","height","forceScroll","className","useState","setText","React","useEffect","where","orderBy","onSnapshot","snapshot","newChat","docs","map","doc","id","data","useChat","chat","key","moment","unix","format","RoomChatComponent","props","inputText","defaultRoom","state","setState","roomIdClicked","onSubmit","event","preventDefault","target","value","then","onChange","name","placeholder","rows","onKeyDown","e","code","handleEnter","MainComponent","rooms","room","setRoom","newRoom","useRoom","inputRoomText","inputSearch","submittedText","submittedRoomText","chatComponent","activeRoom","auth","signInAnonymously","catch","error","message","onAuthStateChanged","setItem","uid","showChat","currentTarget","dataset","getRooms","onClick","data-id","type","filter","includes","filteredRoom","noValidate","autoComplete","display","marginLeft","marginTop","marginRight","TextField","size","variant","borderRadius","Button","r","color","App","Typography","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.64be5eb7.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/storage';\nimport 'firebase/database';\nimport 'firebase/firestore';\nimport 'firebase/messaging';\nimport 'firebase/functions';\n\nlet firebaseConfig = {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport const firestore = firebase.firestore();","import React, {useState} from 'react';\nimport firebase from 'firebase/app';\nimport {firestore} from '../firebase/firebase.utils'\n\nexport function useChat(roomID) {\n    const [text, setText] = useState([])\n    React.useEffect(() => {\n            if (roomID) {\n                firestore.collection('chat')\n                    .where('roomId', '==', roomID)\n                    .orderBy(\"datetime\", \"asc\")\n                    .onSnapshot((snapshot) => {\n                        const newChat = snapshot.docs.map((doc) => ({\n                            id: doc.id,\n                            ...doc.data()\n                        }))\n\n                        setText(newChat);\n                    })\n            }\n        },\n        [roomID]\n    )\n\n    return text\n}\n\nexport const createText = (text, roomID) => {\n    return firestore.collection('chat')\n        .add({\n            text: text,\n            roomId: roomID,\n            datetime: new Date(),\n            user: localStorage.getItem('user')\n        });\n};\n\nexport const createRoom = (text) => {\n    return firestore.collection('rooms')\n        .add({\n            name: text,\n            datetime: new Date(),\n            user: localStorage.getItem('user')\n        });\n};\n\nexport function useRoom() {\n    const [room, setRoom] = useState([])\n    React.useEffect(() => {\n            firestore.collection('rooms').orderBy(\"datetime\", \"asc\").onSnapshot((snapshot) => {\n                const newRoom = snapshot.docs.map((doc) => ({\n                    id: doc.id,\n                    ...doc.data()\n                }))\n                setRoom(newRoom);\n            })\n        },\n        []\n    )\n    return room;\n\n}\n\nexport function setUser() {\n    firebase.auth().signInAnonymously().catch(function (error) {\n        if (error) {\n            return error.message;\n        }\n    });\n    firebase.auth().onAuthStateChanged(function (user) {\n        if (user) {\n            localStorage.setItem('user', user.uid);\n        } else {\n            localStorage.setItem('user', '');\n        }\n    });\n}","import ScrollableFeed from \"react-scrollable-feed\";\nimport React, {Fragment} from \"react\";\nimport {useChat} from \"./FirebaseComponent\";\nimport moment from \"moment\";\n\nexport default function RoomData(roomID) {\n    return (\n        <Fragment>\n            <div style={{height: '600px'}}>\n                <ScrollableFeed forceScroll={true}>\n                    <div className=\"chat-history\">\n                        <ul>\n                            {useChat(roomID.roomID).map((chat) => {\n                                return (\n                                    <li key={chat.id} className=\"clearfix\">\n                                        {chat.user === localStorage.getItem('user') ?\n                                            <div className=\"message-data\">\n                                                    <span className=\"message-data-name\">\n                                                    <i className=\"fa fa-circle online\"/>You</span>\n                                                <span className=\"message-data-time\">{moment.unix(chat.datetime).format('D MMM, LT')}</span>\n                                            </div>\n                                            :\n                                            <div className=\"message-data\">\n                                                    <span className=\"message-data-name float-right\">\n                                                    <i className=\"fa fa-circle online\"/>Anonymous</span>\n                                                <span className=\"message-data-time\">{moment.unix(chat.datetime).format('D MMM, LT')}</span>\n                                            </div>\n                                        }\n                                        {chat.user === localStorage.getItem('user') ?\n                                            <div className=\"message my-message\">\n                                                {chat.text}\n                                            </div>\n                                            :\n                                            <div className=\"message other-message float-right\">\n                                                {chat.text}\n                                            </div>\n                                        }\n\n                                    </li>\n                                )\n                            })}\n                        </ul>\n                    </div>\n                </ScrollableFeed>\n            </div>\n        </Fragment>\n    );\n}","import React from 'react';\nimport {createText} from \"./FirebaseComponent\";\nimport RoomData from \"./RoomData\";\n\nconst RoomChatComponent = (props) => {\n    const [state, setState] = React.useState({\n        inputText: '',\n        roomId: '',\n        defaultRoom: ''\n    });\n\n    function handleChange(event) {\n        setState({\n            inputText: event.target.value\n        })\n    }\n\n    function handleSubmit(event) {\n        event.preventDefault();\n\n        if(props.roomIdClicked) {\n            createText(event.target[0].value, props.roomIdClicked).then(() => setState({\n                inputText: ''\n            }));\n        } else {\n            createText(event.target[0].value, props.defaultRoom).then(() => setState({\n                inputText: ''\n            }));\n        }\n\n    }\n    function handleEnter(e) {\n        if(e.code === 'Enter' || e.code === 'NumpadEnter') {\n            if(props.roomIdClicked) {\n                createText(e.target.value, props.roomIdClicked).then(() => setState({\n                    inputText: ''\n                }));\n            } else {\n                createText(e.target.value, props.defaultRoom).then(() => setState({\n                    inputText: ''\n                }));\n            }\n        }\n    }\n    return (\n        <div>\n            <RoomData roomID={props.roomIdClicked ? props.roomIdClicked : props.defaultRoom}/>\n            <form onSubmit={handleSubmit}>\n                <div className=\"chat-message clearfix\">\n                        <textarea onChange={handleChange} value={state.inputText} name=\"message-to-send\"\n                                  id=\"message-to-send\" placeholder=\"Type your message\"\n                                  rows=\"3\"\n                                  onKeyDown={(e) => handleEnter(e) }/>\n\n                    <i className=\"fa fa-file-o\"/> &nbsp;&nbsp;&nbsp;\n                    <i className=\"fa fa-file-image-o\"/>\n                    <button>Send</button>\n                </div>\n            </form>\n\n        </div>\n\n    )\n}\n\nexport default RoomChatComponent;","import React from 'react';\nimport {createRoom, setUser} from \"./FirebaseComponent\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {useRoom} from './FirebaseComponent';\nimport RoomChatComponent from \"./RoomChatComponent\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst MainComponent = () => {\n    const rooms = useRoom();\n    const [state, setState] = React.useState({\n        inputText: '',\n        inputRoomText: '',\n        inputSearch: '',\n        submittedText: '',\n        submittedRoomText: '',\n        rooms: [],\n        chatComponent: false,\n        roomIdClicked: '',\n        defaultRoom: '',\n        activeRoom: null\n    });\n\n    React.useEffect(() => {\n        setUser();\n        if (rooms[0]) {\n            setState({\n                ...state,\n                defaultRoom: rooms[0].id\n            })\n        }\n    }, [rooms])\n\n    function handleRoomChange(e) {\n        setState({\n            ...state,\n            [e.target.name]: e.target.value\n        });\n    }\n\n    const handleCreateRoom = e => {\n        e.preventDefault();\n\n        createRoom(state.inputRoomText).then(r => setState({\n            ...state,\n            inputRoomText: ''\n        }));\n    };\n\n    /*\n     * Pass data to child component\n     */\n    function showChat(e) {\n        const roomId = e.currentTarget.dataset.id;\n\n        setState({\n            ...state,\n            chatComponent: true,\n            roomIdClicked: roomId,\n            activeRoom: roomId,\n            defaultRoom: ''\n        });\n    }\n\n    const handleSearch = e => {\n        setState({\n            ...state,\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    /*\n     * Get filtered and unfiltered rooms\n     */\n    function getRooms(room) {\n        return (\n            <li className={state.activeRoom === room.id || state.defaultRoom === room.id ? 'clearfix active' : 'clearfix'}\n                onClick={showChat} data-id={room.id} key={room.id}>\n                <div>\n                    <div className=\"name\">{room.name}</div>\n                </div>\n            </li>\n        )\n    }\n    return (\n        <div className=\"container clearfix\">\n            <div className=\"people-list\" id=\"people-list\">\n                <div className=\"search\">\n                    <input value={state.inputSearch} onChange={handleSearch} name=\"inputSearch\" type=\"text\"\n                           placeholder=\"Search\"/>\n                </div>\n\n                <div className={'rooms'}>\n                    <ScrollableFeed>\n                        <ul className=\"list\">\n                            {state.inputSearch ?\n                                rooms.filter(room => room.name.includes(state.inputSearch)).map(filteredRoom => {\n                                    return (\n                                        getRooms(filteredRoom)\n                                    )\n                                })\n                                :\n                                rooms.map((room) => {\n                                    return (\n                                        getRooms(room)\n                                    )\n                                })\n                            }\n                        </ul>\n\n                    </ScrollableFeed>\n                </div>\n                <form noValidate autoComplete=\"off\"\n                      style={{display: \"flex\", marginLeft: \"10px\", marginTop: \"10px\", marginRight: \"10px\",}}>\n                    <TextField\n                        value={state.inputRoomText}\n                        name=\"inputRoomText\"\n                        onChange={handleRoomChange}\n                        id=\"outlined-basic\"\n                        placeholder=\"Create Room\"\n                        size=\"small\"\n                        variant=\"filled\"\n                        style={{borderRadius: \"0 0 0 0\"}}\n                    />\n                    <Button onClick={handleCreateRoom} variant=\"contained\" type={\"submit\"} color=\"primary\" size=\"small\">\n                        Create\n                    </Button>\n                </form>\n            </div>\n\n            <div className=\"chat\">\n                <RoomChatComponent {...state}/>\n            </div>\n        </div>\n    );\n}\n\nexport default MainComponent;","import React from 'react';\nimport './App.scss';\nimport Typography from '@material-ui/core/Typography';\nimport MainComponent from \"./components/MainComponent\";\n\nfunction App() {\n  return (\n      <Typography component=\"div\" variant=\"body1\">\n      <MainComponent />\n      </Typography>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}